package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectGroupProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_GROUP_PRODUCT.
*/
public class ObjectGroupProductDao extends AbstractDao<ObjectGroupProduct, Long> {

    public static final String TABLENAME = "OBJECT_GROUP_PRODUCT";

    /**
     * Properties of entity ObjectGroupProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property GroupID = new Property(1, Integer.class, "groupID", false, "GROUP_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ProductID = new Property(3, Long.class, "productID", false, "PRODUCT_ID");
        public final static Property Timer = new Property(4, Integer.class, "timer", false, "TIMER");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Repeat_day = new Property(6, Integer.class, "repeat_day", false, "REPEAT_DAY");
        public final static Property Ingredient = new Property(7, String.class, "ingredient", false, "INGREDIENT");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
    };


    public ObjectGroupProductDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectGroupProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_GROUP_PRODUCT' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GROUP_ID' INTEGER," + // 1: groupID
                "'NAME' TEXT," + // 2: name
                "'PRODUCT_ID' INTEGER," + // 3: productID
                "'TIMER' INTEGER," + // 4: timer
                "'IMAGE' TEXT," + // 5: image
                "'REPEAT_DAY' INTEGER," + // 6: repeat_day
                "'INGREDIENT' TEXT," + // 7: ingredient
                "'DESCRIPTION' TEXT);"); // 8: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_GROUP_PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectGroupProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer groupID = entity.getGroupID();
        if (groupID != null) {
            stmt.bindLong(2, groupID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Long productID = entity.getProductID();
        if (productID != null) {
            stmt.bindLong(4, productID);
        }
 
        Integer timer = entity.getTimer();
        if (timer != null) {
            stmt.bindLong(5, timer);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        Integer repeat_day = entity.getRepeat_day();
        if (repeat_day != null) {
            stmt.bindLong(7, repeat_day);
        }
 
        String ingredient = entity.getIngredient();
        if (ingredient != null) {
            stmt.bindString(8, ingredient);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectGroupProduct readEntity(Cursor cursor, int offset) {
        ObjectGroupProduct entity = new ObjectGroupProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // groupID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // productID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // timer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // repeat_day
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ingredient
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectGroupProduct entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTimer(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRepeat_day(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIngredient(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectGroupProduct entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectGroupProduct entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
