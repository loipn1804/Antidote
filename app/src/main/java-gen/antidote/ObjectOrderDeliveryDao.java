package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectOrderDelivery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_ORDER_DELIVERY.
*/
public class ObjectOrderDeliveryDao extends AbstractDao<ObjectOrderDelivery, Long> {

    public static final String TABLENAME = "OBJECT_ORDER_DELIVERY";

    /**
     * Properties of entity ObjectOrderDelivery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property OrderDate = new Property(1, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property OrderStatus = new Property(2, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property CustomerID = new Property(3, String.class, "customerID", false, "CUSTOMER_ID");
        public final static Property ShippingFirstName = new Property(4, String.class, "shippingFirstName", false, "SHIPPING_FIRST_NAME");
        public final static Property ShippingLastName = new Property(5, String.class, "shippingLastName", false, "SHIPPING_LAST_NAME");
        public final static Property ShippingCompany = new Property(6, String.class, "shippingCompany", false, "SHIPPING_COMPANY");
        public final static Property ShippingAddress = new Property(7, String.class, "shippingAddress", false, "SHIPPING_ADDRESS");
        public final static Property ShippingApartment = new Property(8, String.class, "shippingApartment", false, "SHIPPING_APARTMENT");
        public final static Property ShippingCity = new Property(9, String.class, "shippingCity", false, "SHIPPING_CITY");
        public final static Property ShippingCountry = new Property(10, String.class, "shippingCountry", false, "SHIPPING_COUNTRY");
        public final static Property ShippingPostCode = new Property(11, String.class, "shippingPostCode", false, "SHIPPING_POST_CODE");
        public final static Property ShippingEmail = new Property(12, String.class, "shippingEmail", false, "SHIPPING_EMAIL");
        public final static Property ShippingPhone = new Property(13, String.class, "shippingPhone", false, "SHIPPING_PHONE");
        public final static Property ShippingNote = new Property(14, String.class, "shippingNote", false, "SHIPPING_NOTE");
        public final static Property SubTotal = new Property(15, String.class, "subTotal", false, "SUB_TOTAL");
        public final static Property Discount = new Property(16, String.class, "discount", false, "DISCOUNT");
        public final static Property ShippingType = new Property(17, String.class, "shippingType", false, "SHIPPING_TYPE");
        public final static Property Total = new Property(18, String.class, "total", false, "TOTAL");
        public final static Property Order_product = new Property(19, String.class, "order_product", false, "ORDER_PRODUCT");
        public final static Property Couponid = new Property(20, String.class, "couponid", false, "COUPONID");
    };


    public ObjectOrderDeliveryDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectOrderDeliveryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_ORDER_DELIVERY' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ORDER_DATE' TEXT," + // 1: orderDate
                "'ORDER_STATUS' TEXT," + // 2: orderStatus
                "'CUSTOMER_ID' TEXT," + // 3: customerID
                "'SHIPPING_FIRST_NAME' TEXT," + // 4: shippingFirstName
                "'SHIPPING_LAST_NAME' TEXT," + // 5: shippingLastName
                "'SHIPPING_COMPANY' TEXT," + // 6: shippingCompany
                "'SHIPPING_ADDRESS' TEXT," + // 7: shippingAddress
                "'SHIPPING_APARTMENT' TEXT," + // 8: shippingApartment
                "'SHIPPING_CITY' TEXT," + // 9: shippingCity
                "'SHIPPING_COUNTRY' TEXT," + // 10: shippingCountry
                "'SHIPPING_POST_CODE' TEXT," + // 11: shippingPostCode
                "'SHIPPING_EMAIL' TEXT," + // 12: shippingEmail
                "'SHIPPING_PHONE' TEXT," + // 13: shippingPhone
                "'SHIPPING_NOTE' TEXT," + // 14: shippingNote
                "'SUB_TOTAL' TEXT," + // 15: subTotal
                "'DISCOUNT' TEXT," + // 16: discount
                "'SHIPPING_TYPE' TEXT," + // 17: shippingType
                "'TOTAL' TEXT," + // 18: total
                "'ORDER_PRODUCT' TEXT," + // 19: order_product
                "'COUPONID' TEXT);"); // 20: couponid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_ORDER_DELIVERY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectOrderDelivery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(2, orderDate);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(3, orderStatus);
        }
 
        String customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindString(4, customerID);
        }
 
        String shippingFirstName = entity.getShippingFirstName();
        if (shippingFirstName != null) {
            stmt.bindString(5, shippingFirstName);
        }
 
        String shippingLastName = entity.getShippingLastName();
        if (shippingLastName != null) {
            stmt.bindString(6, shippingLastName);
        }
 
        String shippingCompany = entity.getShippingCompany();
        if (shippingCompany != null) {
            stmt.bindString(7, shippingCompany);
        }
 
        String shippingAddress = entity.getShippingAddress();
        if (shippingAddress != null) {
            stmt.bindString(8, shippingAddress);
        }
 
        String shippingApartment = entity.getShippingApartment();
        if (shippingApartment != null) {
            stmt.bindString(9, shippingApartment);
        }
 
        String shippingCity = entity.getShippingCity();
        if (shippingCity != null) {
            stmt.bindString(10, shippingCity);
        }
 
        String shippingCountry = entity.getShippingCountry();
        if (shippingCountry != null) {
            stmt.bindString(11, shippingCountry);
        }
 
        String shippingPostCode = entity.getShippingPostCode();
        if (shippingPostCode != null) {
            stmt.bindString(12, shippingPostCode);
        }
 
        String shippingEmail = entity.getShippingEmail();
        if (shippingEmail != null) {
            stmt.bindString(13, shippingEmail);
        }
 
        String shippingPhone = entity.getShippingPhone();
        if (shippingPhone != null) {
            stmt.bindString(14, shippingPhone);
        }
 
        String shippingNote = entity.getShippingNote();
        if (shippingNote != null) {
            stmt.bindString(15, shippingNote);
        }
 
        String subTotal = entity.getSubTotal();
        if (subTotal != null) {
            stmt.bindString(16, subTotal);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(17, discount);
        }
 
        String shippingType = entity.getShippingType();
        if (shippingType != null) {
            stmt.bindString(18, shippingType);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(19, total);
        }
 
        String order_product = entity.getOrder_product();
        if (order_product != null) {
            stmt.bindString(20, order_product);
        }
 
        String couponid = entity.getCouponid();
        if (couponid != null) {
            stmt.bindString(21, couponid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectOrderDelivery readEntity(Cursor cursor, int offset) {
        ObjectOrderDelivery entity = new ObjectOrderDelivery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shippingFirstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shippingLastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shippingCompany
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shippingAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shippingApartment
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shippingCity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // shippingCountry
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // shippingPostCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shippingEmail
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shippingPhone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // shippingNote
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // subTotal
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // discount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // shippingType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // total
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // order_product
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // couponid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectOrderDelivery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShippingFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShippingLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShippingCompany(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShippingAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShippingApartment(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShippingCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShippingCountry(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShippingPostCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShippingEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShippingPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setShippingNote(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubTotal(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDiscount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShippingType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTotal(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOrder_product(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCouponid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectOrderDelivery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectOrderDelivery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
