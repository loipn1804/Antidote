package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_CATEGORY.
*/
public class ObjectCategoryDao extends AbstractDao<ObjectCategory, Long> {

    public static final String TABLENAME = "OBJECT_CATEGORY";

    /**
     * Properties of entity ObjectCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Slug = new Property(2, String.class, "slug", false, "SLUG");
        public final static Property ParentID = new Property(3, String.class, "parentID", false, "PARENT_ID");
        public final static Property ShortDescription = new Property(4, String.class, "shortDescription", false, "SHORT_DESCRIPTION");
        public final static Property FullDescription = new Property(5, String.class, "fullDescription", false, "FULL_DESCRIPTION");
        public final static Property Thumbnail = new Property(6, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property IsActive = new Property(8, String.class, "isActive", false, "IS_ACTIVE");
    };


    public ObjectCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_CATEGORY' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'SLUG' TEXT," + // 2: slug
                "'PARENT_ID' TEXT," + // 3: parentID
                "'SHORT_DESCRIPTION' TEXT," + // 4: shortDescription
                "'FULL_DESCRIPTION' TEXT," + // 5: fullDescription
                "'THUMBNAIL' TEXT," + // 6: thumbnail
                "'IMAGE' TEXT," + // 7: image
                "'IS_ACTIVE' TEXT);"); // 8: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectCategory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(3, slug);
        }
 
        String parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindString(4, parentID);
        }
 
        String shortDescription = entity.getShortDescription();
        if (shortDescription != null) {
            stmt.bindString(5, shortDescription);
        }
 
        String fullDescription = entity.getFullDescription();
        if (fullDescription != null) {
            stmt.bindString(6, fullDescription);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(7, thumbnail);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindString(9, isActive);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectCategory readEntity(Cursor cursor, int offset) {
        ObjectCategory entity = new ObjectCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // slug
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parentID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shortDescription
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fullDescription
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumbnail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectCategory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSlug(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShortDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFullDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThumbnail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsActive(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectCategory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectCategory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
