package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectOrderHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_ORDER_HISTORY.
*/
public class ObjectOrderHistoryDao extends AbstractDao<ObjectOrderHistory, Long> {

    public static final String TABLENAME = "OBJECT_ORDER_HISTORY";

    /**
     * Properties of entity ObjectOrderHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Total = new Property(1, Float.class, "total", false, "TOTAL");
        public final static Property CreateDate = new Property(2, String.class, "createDate", false, "CREATE_DATE");
    };


    public ObjectOrderHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectOrderHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_ORDER_HISTORY' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TOTAL' REAL," + // 1: total
                "'CREATE_DATE' TEXT);"); // 2: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_ORDER_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectOrderHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float total = entity.getTotal();
        if (total != null) {
            stmt.bindDouble(2, total);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectOrderHistory readEntity(Cursor cursor, int offset) {
        ObjectOrderHistory entity = new ObjectOrderHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // total
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // createDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectOrderHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotal(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectOrderHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectOrderHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
