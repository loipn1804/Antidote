package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectCoupon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_COUPON.
*/
public class ObjectCouponDao extends AbstractDao<ObjectCoupon, Long> {

    public static final String TABLENAME = "OBJECT_COUPON";

    /**
     * Properties of entity ObjectCoupon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Discount_type = new Property(2, Integer.class, "discount_type", false, "DISCOUNT_TYPE");
        public final static Property Discount_percent = new Property(3, Float.class, "discount_percent", false, "DISCOUNT_PERCENT");
        public final static Property Discount_amount = new Property(4, Float.class, "discount_amount", false, "DISCOUNT_AMOUNT");
        public final static Property Minimum_amount = new Property(5, Float.class, "minimum_amount", false, "MINIMUM_AMOUNT");
        public final static Property Active = new Property(6, Integer.class, "active", false, "ACTIVE");
    };


    public ObjectCouponDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectCouponDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_COUPON' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'CODE' TEXT," + // 1: code
                "'DISCOUNT_TYPE' INTEGER," + // 2: discount_type
                "'DISCOUNT_PERCENT' REAL," + // 3: discount_percent
                "'DISCOUNT_AMOUNT' REAL," + // 4: discount_amount
                "'MINIMUM_AMOUNT' REAL," + // 5: minimum_amount
                "'ACTIVE' INTEGER);"); // 6: active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_COUPON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectCoupon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        Integer discount_type = entity.getDiscount_type();
        if (discount_type != null) {
            stmt.bindLong(3, discount_type);
        }
 
        Float discount_percent = entity.getDiscount_percent();
        if (discount_percent != null) {
            stmt.bindDouble(4, discount_percent);
        }
 
        Float discount_amount = entity.getDiscount_amount();
        if (discount_amount != null) {
            stmt.bindDouble(5, discount_amount);
        }
 
        Float minimum_amount = entity.getMinimum_amount();
        if (minimum_amount != null) {
            stmt.bindDouble(6, minimum_amount);
        }
 
        Integer active = entity.getActive();
        if (active != null) {
            stmt.bindLong(7, active);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectCoupon readEntity(Cursor cursor, int offset) {
        ObjectCoupon entity = new ObjectCoupon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // discount_type
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // discount_percent
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // discount_amount
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // minimum_amount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectCoupon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiscount_type(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDiscount_percent(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setDiscount_amount(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setMinimum_amount(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setActive(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectCoupon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectCoupon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
