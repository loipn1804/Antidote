package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_USER.
*/
public class ObjectUserDao extends AbstractDao<ObjectUser, Long> {

    public static final String TABLENAME = "OBJECT_USER";

    /**
     * Properties of entity ObjectUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property IdFacebook = new Property(2, String.class, "idFacebook", false, "ID_FACEBOOK");
        public final static Property FirstName = new Property(3, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(4, String.class, "lastName", false, "LAST_NAME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property Country = new Property(8, String.class, "country", false, "COUNTRY");
        public final static Property PostCode = new Property(9, String.class, "postCode", false, "POST_CODE");
        public final static Property IsActive = new Property(10, String.class, "isActive", false, "IS_ACTIVE");
        public final static Property Image = new Property(11, String.class, "image", false, "IMAGE");
    };


    public ObjectUserDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_USER' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'EMAIL' TEXT," + // 1: email
                "'ID_FACEBOOK' TEXT," + // 2: idFacebook
                "'FIRST_NAME' TEXT," + // 3: firstName
                "'LAST_NAME' TEXT," + // 4: lastName
                "'PHONE' TEXT," + // 5: phone
                "'ADDRESS' TEXT," + // 6: address
                "'CITY' TEXT," + // 7: city
                "'COUNTRY' TEXT," + // 8: country
                "'POST_CODE' TEXT," + // 9: postCode
                "'IS_ACTIVE' TEXT," + // 10: isActive
                "'IMAGE' TEXT);"); // 11: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String idFacebook = entity.getIdFacebook();
        if (idFacebook != null) {
            stmt.bindString(3, idFacebook);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(5, lastName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(9, country);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(10, postCode);
        }
 
        String isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindString(11, isActive);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectUser readEntity(Cursor cursor, int offset) {
        ObjectUser entity = new ObjectUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idFacebook
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // country
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // postCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isActive
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdFacebook(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCountry(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPostCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsActive(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
