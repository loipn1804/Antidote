package antidote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import antidote.ObjectFaqComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBJECT_FAQ_COMMENT.
*/
public class ObjectFaqCommentDao extends AbstractDao<ObjectFaqComment, Long> {

    public static final String TABLENAME = "OBJECT_FAQ_COMMENT";

    /**
     * Properties of entity ObjectFaqComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property FaqsID = new Property(1, Long.class, "faqsID", false, "FAQS_ID");
        public final static Property UserID = new Property(2, Long.class, "userID", false, "USER_ID");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property FirstName = new Property(4, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property IdFacebook = new Property(7, String.class, "idFacebook", false, "ID_FACEBOOK");
        public final static Property CreateDate = new Property(8, String.class, "createDate", false, "CREATE_DATE");
    };


    public ObjectFaqCommentDao(DaoConfig config) {
        super(config);
    }
    
    public ObjectFaqCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBJECT_FAQ_COMMENT' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'FAQS_ID' INTEGER," + // 1: faqsID
                "'USER_ID' INTEGER," + // 2: userID
                "'COMMENT' TEXT," + // 3: comment
                "'FIRST_NAME' TEXT," + // 4: firstName
                "'LAST_NAME' TEXT," + // 5: lastName
                "'IMAGE' TEXT," + // 6: image
                "'ID_FACEBOOK' TEXT," + // 7: idFacebook
                "'CREATE_DATE' TEXT);"); // 8: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBJECT_FAQ_COMMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ObjectFaqComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long faqsID = entity.getFaqsID();
        if (faqsID != null) {
            stmt.bindLong(2, faqsID);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(3, userID);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String idFacebook = entity.getIdFacebook();
        if (idFacebook != null) {
            stmt.bindString(8, idFacebook);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(9, createDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ObjectFaqComment readEntity(Cursor cursor, int offset) {
        ObjectFaqComment entity = new ObjectFaqComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // faqsID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idFacebook
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // createDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ObjectFaqComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaqsID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdFacebook(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ObjectFaqComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ObjectFaqComment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
